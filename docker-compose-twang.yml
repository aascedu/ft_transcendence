networks:
  aegis guard: {}

  atlas:
    internal: true

  sentinel:
    internal: true

  internet_access:
    internal: false

volumes:
  shared_code:
    driver: local
    driver_opts:
      type: none
      device: ./requirements/shared_code
      o: bind

  certificates:
    driver: local

  elastic_data:
    driver: local

  kibana_data:
    driver: local

  logstash_data:
    driver: local

  logstash_ingest_data:
    driver: local

  filebeat_data:
    driver: local

  filebeat_ingest_data:
    driver: local

services:
# # Reverse proxy container
  aegis:
    depends_on:
      apollo:
        condition: service_healthy
      iris:
        condition: service_started
      malevitch:
        condition: service_started
      tutum:
        condition: service_healthy
    container_name: aegis
    build:
      context: ./requirements/aegis
      dockerfile: Dockerfile
      args:
        PROXY_CONF: $PROXY_CONF
    env_file: .env
    ports:
      # - "80:80"
      # - "443:443"
      - "7999:80"
      - "8000:443"
    volumes:
      - ./requirements/aegis:/usr/share/nginx/html
      - /etc/letsencrypt/archive/batch42.me:/etc/letsencrypt/live/batch42.me:r
    networks:
      - aegis guard
      - atlas
      - sentinel
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k https://localhost:8000",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

# # Logstash container
  aether:
    depends_on:
      apollo:
        condition: service_healthy
      iris:
        condition: service_started
    container_name: aether
    build:
      context: ./requirements/aether/
      dockerfile: Dockerfile
      args:
        ELASTIC_USER: $ELASTIC_USER
        ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certificates:/usr/share/elasticsearch/config/certs:ro
      - logstash_data:/usr/share/logstash/data
      - logstash_ingest_data:/usr/share/logstash/ingest_data/
    environment:
     xpack.monitoring.enabled: false
     ELASTIC_USER: elastic
     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
     ELASTIC_HOSTS: https://apollo:9200
    networks:
      - sentinel
    restart: on-failure

# # Elastisearch container
  apollo:
    depends_on:
      setup:
        condition: service_healthy
      tutum:
        condition: service_healthy
    container_name: apollo
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certificates:/usr/share/elasticsearch/config/certs:ro
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - sentinel
    environment:
      node.name: elasticsearch
      discovery.type: single-node
      cluster.name: ${CLUSTER_NAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      network.host: 0.0.0.0
      xpack.security.enabled: true
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.key: certs/apollo/apollo.key
      xpack.security.http.ssl.certificate: certs/apollo/apollo.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.key: certs/apollo/apollo.key
      xpack.security.transport.ssl.certificate: certs/apollo/apollo.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: ${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

# # Kibana container
  iris:
    depends_on:
      apollo:
        condition: service_healthy
      tutum:
        condition: service_healthy
    container_name: iris
    image: docker.elastic.co/kibana/kibana:8.12.2
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certificates:/usr/share/kibana/config/certs:ro
      - kibana_data:/usr/share/kibana/data
      - ./tokens:/vault
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: https://apollo:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      SERVER_SSL_ENABLED: false
      XPACK_REPORTING_ROLES_ENABLED: false
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${ENCRYPT_KEY}
      XPACK_REPORTING_ENCRYPTIONKEY: ${REP_ENCRYPT_KEY}
      XPACK_SECURITY_ENCRYPTIONKEY: ${SEC_ENCRYPT_KEY}
      SERVER_REWRITEBASEPATH: true
      SERVER_BASEPATH: /iris
      SERVER_PUBLICBASEURL: https://localhost:8000/iris
      NODE_EXTRA_CA_CERTS: config/certs/ca/ca.crt
      # xpack.screenshotting.browser.chromium.disablesandbox: true
      # xpack.observability.aiassistant: disable
      # LICENSE: ${LICENSE}
    mem_limit: ${KB_MEM_LIMIT}
    networks:
      - internet_access
      - sentinel

# # Front container
  malevitch:
    container_name: malevitch
    image: malevitch
    build:
      context: ./requirements/malevitch
      dockerfile: Dockerfile
    volumes:
      - ./requirements/malevitch:/usr/share/nginx/html
    ports:
      - "8007:80"
    networks:
      - atlas
    restart: on-failure

# # Filebeat container
  orion:
    depends_on:
      apollo:
        condition: service_healthy
      tutum:
        condition: service_healthy
    container_name: orion
    image: orion
    labels:
      co.elastic.logs/module: filebeat
    volumes:
      - certificates:/usr/share/filebeat/config/certs:ro
      - filebeat_data:/usr/share/filebeat/data
      - filebeat_ingest_data:/usr/share/filebeat/ingest_data/
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    build:
      context: ./requirements/orion/
      dockerfile: Dockerfile
    user: root
    environment:
      ELASTIC_USER: elastic
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_HOSTS: https://apollo:9200
      KIBANA_HOSTS: http://iris:5601
      LOGSTASH_HOSTS: http://aether:9600
    networks:
      - atlas
      - sentinel
    restart: on-failure

# # ELK setup container
  setup:
    container_name: setup
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
      - "KIBANA_PASSWORD=${KIBANA_PASSWORD}"
    build:
      context: ./requirements/setup
      dockerfile: Dockerfile
    volumes:
      - certificates:/usr/share/elasticsearch/config/certs
    user: "0"
    command: ./tools/setup.sh
    networks:
      - sentinel
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/apollo/apollo.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  tutum:
    container_name: tutum
    build:
      context: ./requirements/tutum
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./requirements/tutum/vault:/opt/vault
      - ./tokens:/tokens
    ports:
      - "8200:8200"
    networks:
      - sentinel
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-sSf", "http://localhost:8200/v1/sys/health"]
      interval: 1s
      timeout: 5s
      retries: 120