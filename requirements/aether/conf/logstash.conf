input {
    tcp {
        host => "0.0.0.0"
        port => 5140
        type => "nginx_access"
    }
    udp {
        host => "0.0.0.0"
        port => 5140
        type => "nginx_access"
    }
    tcp {
        host => "0.0.0.0"
        port => 5142
        type => "nginx_error"
    }
    udp {
        host => "0.0.0.0"
        port => 5142
        type => "nginx_error"
    }
    tcp {
        host => "0.0.0.0"
        port => 5141
        type => "logstash"
    }
    udp {
        host => "0.0.0.0"
        port => 5141
        type => "logstash"
    }
    beats {
        host => "0.0.0.0"
        port => 5044
        type => "filebeat"
    }
}

filter {
    if [type] == "nginx_access" {
        grok {
            match => {
                "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{IP:client_ip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:status_code} %{NUMBER:response_size} \"%{DATA:referer}\" \"%{GREEDYDATA:user_agent}\""
            }
        }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
        mutate {
            replace => { "type" => "nginx" }
            add_field => { "log_type" => "access" }
        }
        geoip {
            source => "client_ip"
            target => "client"
        }
    }
    if [type] == "nginx_error" {
        grok {
            match => {
                "message" => "\[%{TIMESTAMP_ISO8601:syslog_timestamp}\] %{DATA:log_level} %{DATA:log_source}: %{GREEDYDATA:error_message}, client: %{IP:client_ip}, server: %{DATA:server}, request: \"%{WORD:request_method} %{URIPATH:request_uri} HTTP/%{NUMBER:http_version}\", host: \"%{HOSTNAME:host}\""
            }
            overwrite => [ "message" ]
        }
        date {
            match => [ "syslog_timestamp", "ISO8601" ]
            target => "@timestamp"
        }
        mutate {
            replace => { "type" => "nginx" }
            add_field => { "log_type" => "error" }
        }
        geoip {
            source => "client_ip"
            target => "client"
        }
    }
    if [type] == "logstash" {
        grok {
            match => {
                "message" => "<%{POSINT:syslog_pri}>%{POSINT:syslog_version} %{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} %{POSINT:syslog_pid} - - %{GREEDYDATA:syslog_message}"
            }
        }
        mutate {
            add_field => {
                "program" => "%{syslog_program}"
            }
        }
        date {
            match => [ "syslog_timestamp", "ISO8601" ]
        }
        mutate {
            replace => { "program" => "%{[@metadata][input][tcp][source][name]}" }
        }
    }
    if [type] == "filebeat" {
        json {
            source => "message"
            target => "parsed_message"
            skip_on_invalid_json => true
        }
        if [container][name] {
            mutate {
                add_field => { "program" => "%{[container][name]}" }
            }
        } else if [container][image][name] {
            mutate {
                add_field => { "program" => "%{[container][image][name]}" }
            }
        } else {
            mutate {
                add_field => { "program" => "setup" }
            }
        }
        mutate {
            remove_field => ["beat", "input", "prospector", "offset", "ecs"]
        }
    }
}

output {
    if [type] == "nginx" {
        elasticsearch {
            manage_template => true
            template_name => "nginx_template"
            template_overwrite => true
            template => "/etc/logstash/nginx.json"

            ilm_enabled => true
            ilm_policy => "nginx_policy"
            ilm_rollover_alias => "nginx-index"
            ilm_pattern => "000001"

            hosts => "${ELASTIC_HOSTS}"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_enabled => true
            ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
            ssl_certificate => "config/certs/aether/aether.crt"
            ssl_key => "config/certs/aether/aether.pkcs8.key"

            pipeline => "geoip"
        }
    }
    else if [type] == "logstash" {
        elasticsearch {
            manage_template => true
            template_name => "logstash_template"
            template_overwrite => true
            template => "/etc/logstash/logstash.json"

            ilm_enabled => true
            ilm_policy => "logstash_policy"
            ilm_rollover_alias => "logstash-index"
            ilm_pattern => "000001"

            hosts => "${ELASTIC_HOSTS}"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_enabled => true
            ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
            ssl_certificate => "config/certs/aether/aether.crt"
            ssl_key => "config/certs/aether/aether.pkcs8.key"
        }
    }
    else if [type] == "filebeat" {
        elasticsearch {
            manage_template => true
            template_name => "filebeat_template"
            template_overwrite => true
            template => "/etc/logstash/filebeat.json"

            ilm_enabled => true
            ilm_policy => "filebeat_policy"
            ilm_rollover_alias => "filebeat-index"
            ilm_pattern => "000001"

            hosts => "${ELASTIC_HOSTS}"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_enabled => true
            ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
            ssl_certificate => "config/certs/aether/aether.crt"
            ssl_key => "config/certs/aether/aether.pkcs8.key"
        }
    }
}
