input {
    tcp {
        host => "0.0.0.0"
        port => 5140
        type => "nginx"
    }
    udp {
        host => "0.0.0.0"
        port => 5140
        type => "nginx"
    }
    tcp {
        host => "0.0.0.0"
        port => 5141
        type => "syslog5424"
    }
    udp {
        host => "0.0.0.0"
        port => 5141
        type => "syslog5424"
    }
    beats {
        host => "0.0.0.0"
        port => 5044
        type => "filebeat"
    }
}

filter {
    if [type] == "nginx" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
            # add_field => [ "received_at", "%{@timestamp}" ]
            # add_field => [ "received_from", "%{host}" ]
            add_field => [ "program", "%{syslog_program}" ]
        }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
        # mutate {
        #     add_tag => ["nginx"]
        # }
    }
    if [type] == "syslog5424" {
        grok {
            match => { "message" => "%{POSINT:syslog_version} %{TIMESTAMP_ISO8601:syslog_timestamp} (?:-|%{SYSLOGHOST:syslog_hostname})? (?:-|%{DATA:syslog_program}) (?:-|%{DATA:syslog_pid})? (?:-|%{DATA:syslog_msgid})? %{GREEDYDATA:syslog_message}" }
            # add_field => [ "received_at", "%{@timestamp}" ]
            # add_field => [ "received_from", "%{host}" ]
            add_field => [ "program", "%{syslog_program}" ]
        }
        date {
            match => [ "syslog_timestamp", "ISO8601" ]
        }
        mutate {
            replace => { "program" => "%{[@metadata][input][tcp][source][name]}" }
            # replace => { "received_from" => "%{[@metadata][input][tcp][source][name]}" }
        }
    }
    if [type] == "filebeat" {
        json {
            source => "message"
            target => "parsed_message"
            skip_on_invalid_json => true
        }
        if [parsed_message][message] {
            mutate {
                add_field => { "log_message" => "%{[parsed_message][message]}" }
            }
        }
        if [container][name] {
            mutate {
                add_field => { "program" => "%{[container][name]}" }
            }
        }
        else if [container][image][name] {
            mutate {
                add_field => { "program" => "%{[container][image][name]}" }
            }
        }
        else {
            mutate {
                add_field => { "program" => "setup" }
            }
        }
        mutate {
            remove_field => ["beat","input","prospector","offset", "ecs"]
            add_tag => ["filebeat"]
        }
    #    else {
    #        mutate {
    #            add_field => { "is_debug" => true }
    #        }
    #    }
    }
}

output {
    elasticsearch {
        manage_template => true
        template_name => "my_template"
        template_overwrite => true
        template => "/etc/logstash/ilm.json"

        ilm_enabled => true
        ilm_policy => "my_policy"
        ilm_rollover_alias => "my_policy_index"
        ilm_pattern => "000001"

        hosts => "${ELASTIC_HOSTS}"
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl_enabled => true
        ssl_certificate_authorities => ["config/certs/ca/ca.crt"]
        ssl_certificate => "config/certs/aether/aether.crt"
        ssl_key => "config/certs/aether/aether.pkcs8.key"
    }
}
